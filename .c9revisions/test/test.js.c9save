{"ts":1386569800111,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var chai = require('chai');\nvar expect = chai.expect;\nchai.should();\n\ndescribe('Database', function(){\n\tit('#must have mongodb', function(){\n\t\trequire('mongoose');\n\t});\n});\n\ndescribe('connection', function(){\n\tit('#must establish a connection', function(){\n\t\n\t});\n});\n\ndescribe('Data Source', function(){\n\tit('#must create data source');\n\tit('#must create different kinds of data source');\n\tit('#must have a category property');\n\tit('#must contain at least one field');\n\tit('#should update');\n\tit('#should delete');\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":520}]],"length":520}
{"contributors":[],"silentsave":false,"ts":1386570027384,"patch":[[{"diffs":[[0,"(){\n\t\n\t});\n});\n\n"],[1,"describe('Data Types',function(){\n    describe(\"options\");\n    describe(\"server\", function(){\n        it(\"#must have a valid mongoose schema type\");\n    });\n    describe(\"client\", function(){\n        describe(\"element\", function(){\n            \n        });\n    });\n});\n\n"],[0,"describe('Data S"]],"start1":253,"start2":253,"length1":32,"length2":302}]],"length":790,"saved":false}
{"contributors":[],"silentsave":false,"ts":1386570470898,"patch":[[{"diffs":[[0,"ion(){\n\t"],[1,"    "],[0,"\n\t});\n})"]],"start1":250,"start2":250,"length1":16,"length2":20},{"diffs":[[0,"        "],[1,"it(\"should exist\");\n            it(\"will options as first argument\");\n            it(\"must return a valid html markup string\");\n        });\n        \n        describe(\"render\", function(){\n            it(\"should exist\");\n            it(\"should have valid html markup string as first argument\")\n            it(\"should have json data as second element\")"],[0,"\n       "]],"start1":509,"start2":509,"length1":16,"length2":366}]],"length":1144,"saved":false}
{"ts":1386570510982,"patch":[[{"diffs":[[-1,"var chai = require('chai');\nvar expect = chai.expect;\nchai.should();"],[0,"\n\nde"]],"start1":0,"start2":0,"length1":72,"length2":4}]],"length":1076,"saved":false}
{"ts":1386570522126,"patch":[[{"diffs":[[1,"var chai = require('chai');\nvar expect = chai.expect;\nchai.should();"],[0,"\n"],[-1,""],[0,"\ndescribe('Database'"]],"start1":0,"start2":0,"length1":21,"length2":89},{"diffs":[[0,");\n\n"],[-1,"describe('Data Types',function(){\n    describe(\"options\");\n    describe(\"server\", function(){\n        it(\"#must have a valid mongoose schema type\");\n    });\n    describe(\"client\", function(){\n        describe(\"element\", function(){\n            it(\"should exist\");\n            it(\"will options as first argument\");\n            it(\"must return a valid html markup string\");\n        });\n        \n        describe(\"render\", function(){\n            it(\"should exist\");\n            it(\"should have valid html markup string as first argument\")\n            it(\"should have json data as second element\")\n        });\n    });\n});"],[0,"\n\nde"]],"start1":269,"start2":269,"length1":626,"length2":8}]],"length":526,"saved":false}
{"ts":1386570532017,"patch":[[{"diffs":[[0,");\n});\n\n"],[1,"describe('Data Types',function(){\n    //describe(\"options\");\n    describe(\"server\", function(){\n        it(\"#must have a valid mongoose schema type\");\n    });\n    describe(\"client\", function(){\n        describe(\"element\", function(){\n            it(\"should exist\");\n            it(\"will options as first argument\");\n            it(\"must return a valid html markup string\");\n        });\n        \n        describe(\"render\", function(){\n            it(\"should exist\");\n            it(\"should have valid html markup string as first argument\")\n            it(\"should have json data as second element\")\n        });\n    });\n});"],[0,"\n\ndescri"]],"start1":265,"start2":265,"length1":16,"length2":636}]],"length":1146,"saved":false}
{"ts":1386570645772,"patch":[[{"diffs":[[0,"  //"],[-1,"describe(\"options\");"],[1,"common to all datatypes"],[0,"\n   "]],"start1":309,"start2":309,"length1":28,"length2":31},{"diffs":[[0,"d element\")\n"],[1,"            it()\n"],[0,"        });\n"]],"start1":861,"start2":861,"length1":24,"length2":41}]],"length":1166,"saved":false}
{"ts":1386570713171,"patch":[[{"diffs":[[0,"     it("],[1,"\"should return a DOM element\""],[0,")\n      "]],"start1":880,"start2":880,"length1":16,"length2":45}]],"length":1195,"saved":false}
{"ts":1386570791702,"patch":[[{"diffs":[[0,"        });\n"],[1,"        \n        describe(\"serialize\", function(){\n            it(\"should return a valid string or an object\");\n        });\n"],[0,"    });\n});\n"]],"start1":919,"start2":919,"length1":24,"length2":148}]],"length":1319,"saved":false}
{"ts":1386571085063,"patch":[[{"diffs":[[0,"expect;\n"],[1,"\nvar Types = require(\"../lib/cms/Types/types.js\")\n\n"],[0,"chai.sho"]],"start1":46,"start2":46,"length1":16,"length2":67},{"diffs":[[0,"});\n    });\n"],[1,"    \n    /**\n     ** String\n     **\n     */\n     describe(\"Text\", function(){\n        describe(\"options\", function(){\n            it(\"must have \")\n        });\n     });\n"],[0,"});\n\ndescrib"]],"start1":1102,"start2":1102,"length1":24,"length2":192}]],"length":1538,"saved":false}
{"ts":1386571352302,"patch":[[{"diffs":[[0,".expect;"],[1,"\nvar mongoose = require(\"mongoose\");"],[0,"\n\nvar Ty"]],"start1":45,"start2":45,"length1":16,"length2":52}]],"length":1574,"saved":false}
{"ts":1386571357124,"patch":[[{"diffs":[[0,"goose\");"],[1,"\nconsole.log(mongoose.Types);"],[0,"\n\nvar Ty"]],"start1":81,"start2":81,"length1":16,"length2":45}]],"length":1603,"saved":false}
{"ts":1386571398940,"patch":[[{"diffs":[[0,"ould();\n"],[1,"/*"],[0,"\ndescrib"]],"start1":177,"start2":177,"length1":16,"length2":18}]],"length":1605,"saved":false}
{"ts":1386571406132,"patch":[[{"diffs":[[0,"();\n"],[-1,"/*\ndescribe('Database', function(){\n\tit('#must have mongodb', function(){\n\t\trequire('mongoose');\n\t});\n});\n\ndescribe('connection', function(){\n\tit('#must establish a connection', function(){\n\t    \n\t});\n});\n\ndescribe('Data Types',function(){\n    //common to all datatypes\n    describe(\"server\", function(){\n        it(\"#must have a valid mongoose schema type\");\n    });\n    describe(\"client\", function(){\n        describe(\"element\", function(){\n            it(\"should exist\");\n            it(\"will options as first argument\");\n            it(\"must return a valid html markup string\");\n        });\n        \n        describe(\"render\", function(){\n            it(\"should exist\");\n            it(\"should have valid html markup string as first argument\")\n            it(\"should have json data as second element\")\n            it(\"should return a DOM element\")\n        });\n        \n        describe(\"serialize\", function(){\n            it(\"should return a valid string or an object\");\n        });\n    });\n    \n    /**\n     ** String\n     **\n     */\n     describe(\"Text\", function(){\n        describe(\"options\", function(){\n            it(\"must have \")\n        });\n     });\n});\n\ndescribe('Data Source', function(){\n\tit('#must create data source');\n\tit('#must create different kinds of data source');\n\tit('#must have a category property');\n\tit('#must contain at least one field');\n\tit('#should update');\n\tit('#should delete');\n});\n"]],"start1":181,"start2":181,"length1":1424,"length2":4}]],"length":185,"saved":false}
{"ts":1386571423796,"patch":[[{"diffs":[[0,"ould();\n"],[1,"\ndescribe('Database', function(){\n\tit('#must have mongodb', function(){\n\t\trequire('mongoose');\n\t});\n});\n\ndescribe('connection', function(){\n\tit('#must establish a connection', function(){\n\t    \n\t});\n});\n\ndescribe('Data Types',function(){\n    //common to all datatypes\n    describe(\"server\", function(){\n        it(\"#must have a valid mongoose schema type\");\n    });\n    describe(\"client\", function(){\n        describe(\"element\", function(){\n            it(\"should exist\");\n            it(\"will options as first argument\");\n            it(\"must return a valid html markup string\");\n        });\n        \n        describe(\"render\", function(){\n            it(\"should exist\");\n            it(\"should have valid html markup string as first argument\")\n            it(\"should have json data as second element\")\n            it(\"should return a DOM element\")\n        });\n        \n        describe(\"serialize\", function(){\n            it(\"should return a valid string or an object\");\n        });\n    });\n    \n    /**\n     ** String\n     **\n     */\n     describe(\"Text\", function(){\n        describe(\"options\", function(){\n            it(\"must have \")\n        });\n     });\n});\n\ndescribe('Data Source', function(){\n\tit('#must create data source');\n\tit('#must create different kinds of data source');\n\tit('#must have a category property');\n\tit('#must contain at least one field');\n\tit('#should update');\n\tit('#should delete');\n});\n"]],"start1":177,"start2":177,"length1":8,"length2":1426}]],"length":1603,"saved":false}
{"ts":1386571437121,"patch":[[{"diffs":[[0,"ongoose."],[1,"Schema.Schema"],[0,"Types);\n"]],"start1":103,"start2":103,"length1":16,"length2":29}]],"length":1616,"saved":false}
{"ts":1386571443344,"patch":[[{"diffs":[[0,"s);\n"],[-1,"\nvar Types = require(\"../lib/cms/Types/types.js\")\n\nchai.should();\n\ndescribe('Database', function(){\n\tit('#must have mongodb', function(){\n\t\trequire('mongoose');\n\t});\n});\n\ndescribe('connection', function(){\n\tit('#must establish a connection', function(){\n\t    \n\t});\n});\n\ndescribe('Data Types',function(){\n    //common to all datatypes\n    describe(\"server\", function(){\n        it(\"#must have a valid mongoose schema type\");\n    });\n    describe(\"client\", function(){\n        describe(\"element\", function(){\n            it(\"should exist\");\n            it(\"will options as first argument\");\n            it(\"must return a valid html markup string\");\n        });\n        \n        describe(\"render\", function(){\n            it(\"should exist\");\n            it(\"should have valid html markup string as first argument\")\n            it(\"should have json data as second element\")\n            it(\"should return a DOM element\")\n        });\n        \n        describe(\"serialize\", function(){\n            it(\"should return a valid string or an object\");\n        });\n    });\n    \n    /**\n     ** String\n     **\n     */\n     describe(\"Text\", function(){\n        describe(\"options\", function(){\n            it(\"must have \")\n        });\n     });\n});\n\ndescribe('Data Source', function(){\n\tit('#must create data source');\n\tit('#must create different kinds of data source');\n\tit('#must have a category property');\n\tit('#must contain at least one field');\n\tit('#should update');\n\tit('#should delete');\n});\n"]],"start1":128,"start2":128,"length1":1488,"length2":4}]],"length":132,"saved":false}
{"ts":1386571460123,"patch":[[{"diffs":[[0,".Schema."],[-1,"Schema"],[0,"Types);\n"]],"start1":110,"start2":110,"length1":22,"length2":16}]],"length":126,"saved":false}
{"ts":1386571505297,"patch":[[{"diffs":[[0,"\");\n"],[-1,"console.log(mongoose.Schema.Types"],[1,"\nvar Types = require(\"../lib/cms/Types/types.js\")\n\nchai.should();\n\ndescribe('Database', function(){\n\tit('#must have mongodb', function(){\n\t\trequire('mongoose');\n\t});\n});\n\ndescribe('connection', function(){\n\tit('#must establish a connection', function(){\n\t    \n\t});\n});\n\ndescribe('Data Types',function(){\n    //common to all datatypes\n    describe(\"server\", function(){\n        it(\"#must have a valid mongoose schema type\");\n    });\n    describe(\"client\", function(){\n        describe(\"element\", function(){\n            it(\"should exist\");\n            it(\"will options as first argument\");\n            it(\"must return a valid html markup string\");\n        });\n        \n        describe(\"render\", function(){\n            it(\"should exist\");\n            it(\"should have valid html markup string as first argument\")\n            it(\"should have json data as second element\")\n            it(\"should return a DOM element\")\n        });\n        \n        describe(\"serialize\", function(){\n            it(\"should return a valid string or an object\");\n        });\n    });\n    \n    /**\n     ** String\n     **\n     */\n     describe(\"Text\", function(){\n        describe(\"options\", function(){\n            it(\"must have \")\n        });\n     });\n});\n\ndescribe('Data Source', function(){\n\tit('#must create data source');\n\tit('#must create different kinds of data source');\n\tit('#must have a category property');\n\tit('#must contain at least one field');\n\tit('#should update');\n\tit('#should delete');\n}"],[0,");\n"]],"start1":86,"start2":86,"length1":40,"length2":1488}]],"length":1574,"saved":false}
{"ts":1386571543240,"patch":[[{"diffs":[[0,");\n\n"],[-1,"describe('connection', function(){\n\tit('#must establish a connection', function(){\n\t    \n\t});\n});\n\n"],[0,"desc"]],"start1":257,"start2":257,"length1":107,"length2":8}]],"length":1475,"saved":false}
{"ts":1386571583747,"patch":[[{"diffs":[[0,"tatypes\n"],[1,"    it(\"must exist\");\n"],[0,"    desc"]],"start1":317,"start2":317,"length1":16,"length2":38}]],"length":1497,"saved":false}
{"ts":1386571675042,"patch":[[{"diffs":[[0,"\"must exist\""],[1,", function(){\n        expect(Types).to.exist;\n    }"],[0,");\n    descr"]],"start1":332,"start2":332,"length1":24,"length2":75}]],"length":1548,"saved":false}
{"ts":1386571686673,"patch":[[{"diffs":[[0,"pes).to."],[1,"not."],[0,"exist;\n "]],"start1":375,"start2":375,"length1":16,"length2":20}]],"length":1552,"saved":false}
{"ts":1386571690862,"patch":[[{"diffs":[[0,"o.no"],[-1,"t."],[0,"exis"]],"start1":381,"start2":381,"length1":10,"length2":8}]],"length":1550,"saved":false}
{"ts":1386571692676,"patch":[[{"diffs":[[0,".to."],[-1,"no"],[0,"exis"]],"start1":379,"start2":379,"length1":10,"length2":8}]],"length":1548,"saved":false}
{"ts":1386571902353,"patch":[[{"diffs":[[0,"  it(\"#must "],[1,"exist\", function(){\n            for(var Type in Types) {\n                var type = Types[Type];\n                \n            }\n        });\n        it(\"should "],[0,"have a valid"]],"start1":439,"start2":439,"length1":24,"length2":183}]],"length":1707,"saved":false}
{"ts":1386571951266,"patch":[[{"diffs":[[0,"                "],[1,"expect(type.server).to.exist"],[0,"\n            }\n "]],"start1":548,"start2":548,"length1":32,"length2":60}]],"length":1735,"saved":false}
{"ts":1386571999696,"patch":[[{"diffs":[[0,"ype.serv"],[1,"s"],[0,"er).to.e"]],"start1":572,"start2":572,"length1":16,"length2":17}]],"length":1736,"saved":false}
{"ts":1386572053713,"patch":[[{"diffs":[[0,"t\", function(){\n"],[1,"            console.log(Type)\n"],[0,"            for("]],"start1":455,"start2":455,"length1":32,"length2":62}]],"length":1766,"saved":false}
{"ts":1386572060902,"patch":[[{"diffs":[[0,"log(Type"],[1,"s"],[0,")\n      "]],"start1":491,"start2":491,"length1":16,"length2":17}]],"length":1767,"saved":false}
{"ts":1386572072061,"patch":[[{"diffs":[[0,"(){\n"],[-1,"            console.log(Types)\n"],[0,"    "]],"start1":467,"start2":467,"length1":39,"length2":8}]],"length":1736,"saved":false}
{"ts":1386572149007,"patch":[[{"diffs":[[0,"t\", function(){\n"],[1,"            console.log(Type);\n"],[0,"            for("]],"start1":455,"start2":455,"length1":32,"length2":63}]],"length":1767,"saved":false}
{"ts":1386572153496,"patch":[[{"diffs":[[0,"log(Type"],[1,"s"],[0,");\n     "]],"start1":491,"start2":491,"length1":16,"length2":17}]],"length":1768,"saved":false}
{"ts":1386572296706,"patch":[[{"diffs":[[0,"og(Types"],[1,".tex"],[0,");\n     "]],"start1":492,"start2":492,"length1":16,"length2":20}]],"length":1772,"saved":false}
{"ts":1386572300956,"patch":[[{"diffs":[[0,"ypes"],[-1,".tex"],[0,");\n "]],"start1":496,"start2":496,"length1":12,"length2":8}]],"length":1768,"saved":false}
{"ts":1386572497933,"patch":[[{"diffs":[[0,"ypes"],[-1,"/types.js"],[0,"\")\n\n"]],"start1":124,"start2":124,"length1":17,"length2":8}]],"length":1759,"saved":false}
{"ts":1386572648233,"patch":[[{"diffs":[[0,"(){\n"],[-1,"            console.log(Types);\n"],[0,"    "]],"start1":458,"start2":458,"length1":40,"length2":8}]],"length":1727,"saved":false}
{"ts":1386572729076,"patch":[[{"diffs":[[0,"ype.serv"],[-1,"s"],[0,"er).to.e"]],"start1":563,"start2":563,"length1":17,"length2":16}]],"length":1726,"saved":false}
{"ts":1386580259727,"patch":[[{"diffs":[[0,"ma type\""],[1,", function(){\n            for(var Type in Types) {\n                var type = Types[Type];\n                expect(type.server.schema).to.exist\n            }\n            \n        }"],[0,");\n    }"]],"start1":655,"start2":655,"length1":16,"length2":195}]],"length":1905,"saved":false}
{"ts":1386580281277,"patch":[[{"diffs":[[0,"schema).to.exist"],[1,";"],[0,"\n            }\n "]],"start1":789,"start2":789,"length1":32,"length2":33}]],"length":1906,"saved":false}
{"ts":1386580324432,"patch":[[{"diffs":[[0,"                "],[-1,"expect("],[1,"var schema = "],[0,"type.server.sche"]],"start1":754,"start2":754,"length1":39,"length2":45},{"diffs":[[0,"r.schema"],[-1,").to.exist;"],[1,";\n                expect(schema).to.exist;\n               // expect(schema)"],[0,"\n       "]],"start1":793,"start2":793,"length1":27,"length2":91}]],"length":1976,"saved":false}
{"ts":1386580519324,"patch":[[{"diffs":[[0,"e\", function(){\n"],[1,"            var mongoose_types = mongoose.Schema.Types;\n            var schema = new mongoose.Schema({ name: 'string' });\n            //console.log\n"],[0,"            for("]],"start1":661,"start2":661,"length1":32,"length2":180}]],"length":2124,"saved":false}
{"ts":1386580523244,"patch":[[{"diffs":[[0,"ame: 'st"],[1,"s"],[0,"ring' })"]],"start1":781,"start2":781,"length1":16,"length2":17}]],"length":2125,"saved":false}
{"ts":1386580557192,"patch":[[{"diffs":[[0,"(){\n"],[-1,"            var mongoose_types = mongoose.Schema.Types;\n            var schema = new mongoose.Schema({ name: 'stsring' });\n            //console.log\n"],[0,"    "]],"start1":673,"start2":673,"length1":157,"length2":8},{"diffs":[[0,"    "],[-1,"// expect("],[1,"new mongoose.Schema({ name: "],[0,"schema"],[-1,")"],[1," });"],[0,"\n   "]],"start1":855,"start2":855,"length1":25,"length2":46}]],"length":1997,"saved":false}
{"ts":1386580577096,"patch":[[{"diffs":[[0,"        "],[1,"  var a ="],[0," new mon"]],"start1":850,"start2":850,"length1":16,"length2":25}]],"length":2006,"saved":false}
{"ts":1386580594538,"patch":[[{"diffs":[[0,"{ name: "],[-1,"schema"],[1,"\"sdsd\""],[0," });\n   "]],"start1":888,"start2":888,"length1":22,"length2":22}]],"length":2006,"saved":false}
{"ts":1386580643892,"patch":[[{"diffs":[[0,").to.exist;\n"],[1,"                console.log(schema);\n"],[0,"            "]],"start1":832,"start2":832,"length1":24,"length2":61},{"diffs":[[0,"me: "],[-1,"\"sdsd\""],[1,"schema"],[0," });"]],"start1":929,"start2":929,"length1":14,"length2":14}]],"length":2043,"saved":false}
{"ts":1386580757981,"patch":[[{"diffs":[[0,"    "],[-1," var a ="],[0," new"]],"start1":892,"start2":892,"length1":16,"length2":8},{"diffs":[[0,"  }\n"],[-1,"            \n"],[0,"    "]],"start1":946,"start2":946,"length1":21,"length2":8}]],"length":2022,"saved":false}
{"ts":1386580765564,"patch":[[{"diffs":[[0,": schema });"],[1," "],[0,"\n           "]],"start1":923,"start2":923,"length1":24,"length2":25}]],"length":2023,"saved":false}
{"ts":1386580900302,"patch":[[{"diffs":[[0,"st;\n"],[-1,"                console.log(schema);\n"],[0,"    "]],"start1":840,"start2":840,"length1":45,"length2":8}]],"length":1986,"saved":false}
{"ts":1386581105884,"patch":[[{"diffs":[[0,"            it(\""],[-1,"should"],[1,"must"],[0," exist\");\n      "]],"start1":1009,"start2":1009,"length1":38,"length2":36}]],"length":1984,"saved":false}
{"ts":1386581157518,"patch":[[{"diffs":[[0,"\"must exist\""],[1,", function(){\n                for(var Type in Types) {\n                    var type = Types[Type];\n                    expect(type.client).to.exist\n                }\n            }"],[0,");\n         "]],"start1":1024,"start2":1024,"length1":24,"length2":203}]],"length":2163,"saved":false}
{"ts":1386581330521,"patch":[[{"diffs":[[0,"it(\""],[-1,"will"],[1,"should have"],[0," opt"]],"start1":1230,"start2":1230,"length1":12,"length2":19},{"diffs":[[0,"rgument\""],[1,", function(){\n            }"],[0,");\n     "]],"start1":1264,"start2":1264,"length1":16,"length2":43}]],"length":2197,"saved":false}
{"ts":1386582214830,"patch":[[{"diffs":[[0," string\""],[1,", function(){\n            }"],[0,");\n     "]],"start1":1349,"start2":1349,"length1":16,"length2":43}]],"length":2224,"saved":false}
